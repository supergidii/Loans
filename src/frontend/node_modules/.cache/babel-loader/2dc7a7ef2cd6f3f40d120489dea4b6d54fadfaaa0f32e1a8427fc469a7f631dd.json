{"ast":null,"code":"import axios from 'axios';\nexport default {\n  namespaced: true,\n  state: {\n    referrals: [],\n    referralStats: {\n      totalReferrals: 0,\n      totalEarnings: 0,\n      activeReferrals: 0\n    },\n    referralCode: null\n  },\n  mutations: {\n    SET_REFERRALS(state, referrals) {\n      state.referrals = referrals;\n    },\n    SET_REFERRAL_STATS(state, stats) {\n      state.referralStats = stats;\n    },\n    SET_REFERRAL_CODE(state, code) {\n      state.referralCode = code;\n    },\n    ADD_REFERRAL(state, referral) {\n      state.referrals.push(referral);\n    },\n    UPDATE_REFERRAL(state, updatedReferral) {\n      const index = state.referrals.findIndex(ref => ref._id === updatedReferral._id);\n      if (index !== -1) {\n        state.referrals.splice(index, 1, updatedReferral);\n      }\n    }\n  },\n  actions: {\n    async fetchReferrals({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/referrals');\n        commit('SET_REFERRALS', response.data.referrals);\n        commit('SET_REFERRAL_STATS', response.data.stats);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async generateReferralCode({\n      commit\n    }) {\n      try {\n        const response = await axios.post('/api/referrals/generate-code');\n        commit('SET_REFERRAL_CODE', response.data.code);\n        return response.data.code;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async fetchReferralStats({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/referrals/stats');\n        commit('SET_REFERRAL_STATS', response.data);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async updateReferral({\n      commit\n    }, {\n      id,\n      data\n    }) {\n      try {\n        const response = await axios.put(`/api/referrals/${id}`, data);\n        commit('UPDATE_REFERRAL', response.data);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    }\n  },\n  getters: {\n    allReferrals: state => state.referrals,\n    referralStats: state => state.referralStats,\n    referralCode: state => state.referralCode,\n    activeReferrals: state => state.referrals.filter(ref => ref.status === 'active'),\n    completedReferrals: state => state.referrals.filter(ref => ref.status === 'completed')\n  }\n};","map":{"version":3,"names":["axios","namespaced","state","referrals","referralStats","totalReferrals","totalEarnings","activeReferrals","referralCode","mutations","SET_REFERRALS","SET_REFERRAL_STATS","stats","SET_REFERRAL_CODE","code","ADD_REFERRAL","referral","push","UPDATE_REFERRAL","updatedReferral","index","findIndex","ref","_id","splice","actions","fetchReferrals","commit","response","get","data","error","generateReferralCode","post","fetchReferralStats","updateReferral","id","put","getters","allReferrals","filter","status","completedReferrals"],"sources":["C:/Users/UPFRONT/Documents/newprol/src/frontend/src/store/modules/referrals.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    referrals: [],\r\n    referralStats: {\r\n      totalReferrals: 0,\r\n      totalEarnings: 0,\r\n      activeReferrals: 0\r\n    },\r\n    referralCode: null\r\n  },\r\n  mutations: {\r\n    SET_REFERRALS(state, referrals) {\r\n      state.referrals = referrals\r\n    },\r\n    SET_REFERRAL_STATS(state, stats) {\r\n      state.referralStats = stats\r\n    },\r\n    SET_REFERRAL_CODE(state, code) {\r\n      state.referralCode = code\r\n    },\r\n    ADD_REFERRAL(state, referral) {\r\n      state.referrals.push(referral)\r\n    },\r\n    UPDATE_REFERRAL(state, updatedReferral) {\r\n      const index = state.referrals.findIndex(ref => ref._id === updatedReferral._id)\r\n      if (index !== -1) {\r\n        state.referrals.splice(index, 1, updatedReferral)\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchReferrals({ commit }) {\r\n      try {\r\n        const response = await axios.get('/api/referrals')\r\n        commit('SET_REFERRALS', response.data.referrals)\r\n        commit('SET_REFERRAL_STATS', response.data.stats)\r\n        return response.data\r\n      } catch (error) {\r\n        throw error\r\n      }\r\n    },\r\n    async generateReferralCode({ commit }) {\r\n      try {\r\n        const response = await axios.post('/api/referrals/generate-code')\r\n        commit('SET_REFERRAL_CODE', response.data.code)\r\n        return response.data.code\r\n      } catch (error) {\r\n        throw error\r\n      }\r\n    },\r\n    async fetchReferralStats({ commit }) {\r\n      try {\r\n        const response = await axios.get('/api/referrals/stats')\r\n        commit('SET_REFERRAL_STATS', response.data)\r\n        return response.data\r\n      } catch (error) {\r\n        throw error\r\n      }\r\n    },\r\n    async updateReferral({ commit }, { id, data }) {\r\n      try {\r\n        const response = await axios.put(`/api/referrals/${id}`, data)\r\n        commit('UPDATE_REFERRAL', response.data)\r\n        return response.data\r\n      } catch (error) {\r\n        throw error\r\n      }\r\n    }\r\n  },\r\n  getters: {\r\n    allReferrals: state => state.referrals,\r\n    referralStats: state => state.referralStats,\r\n    referralCode: state => state.referralCode,\r\n    activeReferrals: state => state.referrals.filter(ref => ref.status === 'active'),\r\n    completedReferrals: state => state.referrals.filter(ref => ref.status === 'completed')\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}